Flatdata reader in Go
GDG Berlin Golang meetup

Artem Nikitin
System Engineer, HERE Technologies
hi@artemnikitin.com
https://artemnikitin.com
@artemnikitin

* Why Flatdata?

Existed data format was optimized for embedded and client apps:

- Reduced space consumption (Disk)

- Incremental processing tile-by-tile (CPU)

Drawbacks for backend:

- Decoding tiles and reconstructing world representation (CPU Time)

- Custom tile cache not shared between service processes (RAM)

* Introducing Flatdata

What is Flatdata?

Flatdata is a library providing data structures for convenient creation, storage and access of packed memory-mappable structures with minimal overhead. 

Library consists of:

- Schema language

- Code generators for target languages

- Target language libraries

Difference from Protobuf and Co?

Instead of message passing it's oriented on efficient access to data stored in an immutable data storage.

* When it's useful?

- Your data updates infrequently and accessed much more often than updated

- You can afford to recreate the full data archive on every update

- Your data fits in the RAM on target instance

- You want to optimize your data to be cache-friendly

* Example

.link https://github.com/artemnikitin/flatdata-go-coappearances-example

Schema 

    namespace coappearances {    

    struct Meta {    
        title_ref : u32 : 32;    
        author_ref : u32 : 32;   
    }       
     
    // And so on ...        

    archive Graph {     
        meta : Meta;    
        vertices : vector< Character >; 
        edges : vector< Coappearance >; 
        vertices_data : multivector< 32, Nickname, Description, UnaryRelation, BinaryRelation >; 
        chapters : vector< Chapter >;   
        strings : raw_data;  
    }   

    }        

* Example

Generate sources based on schema

	app.py -v -g go \
	-s coappearances.flatdata \
	-O coappearances/coappearances_generated.go

Generated Go code isn't properly Go formated!

* Example

Use generated sources

	log.SetFlags(log.LstdFlags | log.Lshortfile)
	
	cg, err := coappearances.OpenGraphArchive(flatdata.NewFileResourceStorage("flatdata/Graph.archive"))
	if err != nil {
		log.Fatal(err)
	}
	defer cg.Close()

	fmt.Println(cg.ToString())

* How it works (generated code)

	vertices := cg.VerticesVector

	type GraphVerticesVector struct {
		descriptor flatdata.MemoryDescriptor
		IsOptional bool
		IsOpen     bool
	}
	// ------
	entry := vertices.Get(5)	

	type Character struct {
		descriptor flatdata.MemoryDescriptor
		position   int
	}
	// ------
	value := entry.GetNameRef()

	func (v *Character) GetNameRef() uint32 {
		elementSizeInBits := uint(32)
		elementOffset := uint(0)
		result := flatdata.Read(v.descriptor, (uint(v.position)*8)+elementOffset, elementSizeInBits, false)
		return uint32(result)
	}

* How it works (Go common lib)

	type ResourceStorage interface {
		GetMemoryDescriptor(name string) (MemoryDescriptor, string, error)
		GetBasePath() string
	}

	// FileResourceStorage implements ResourceStorage interface for memory-mapped file
	type FileResourceStorage struct {
		...
	}

	// -----

	type MemoryDescriptor interface {
		io.ReaderAt
		Close() error	
		Len() int
		At(i int) byte
	}

	// golang.org/x/exp/mmap
	// ReaderAt reads a memory-mapped file.
	type ReaderAt struct {
		...
	}

* How it works (Go common lib)

Implemented in _flatdata/flatdata-go/flatdata/reader.go_
	
	func Read(descriptor MemoryDescriptor, offset, size uint, signed bool) int {
		...
	}

In the future, current implementation will be replaced by existed C++ implementation

Warning! Common lib shouldn't be used directly by developer!

* Current status of Go implementation of reader


- It's feature complete comparing to C++/Python

- It's passes tests for C++/Python implementations

- Probably, a lots of bugs missed :)

- Performance is unclear

- No guarantees of backward compatible changes for public API

* Roadmap


- Some changes to API

- Fixing bugs

- Measuring and fixing (if needed) performance

- Writer in Go


